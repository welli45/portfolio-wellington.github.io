try:
self.bday_str = self.bday_picker.value.strftime("%m-%d")
except AttributeError:
self.ax.set_title(f"Input a valid date and try again!")
return
self.bday_index = self.dates.index(self.bday_str)
def generate_bday(self):
# gen_bdays = np.random.randint(0, 365, (n_people))
gen_bday = np.random.randint(0, 365)
# if not np.isnan(self.y[gen_bday]):
if gen_bday == self.bday_index:
self.match = True
def add_students(self):
if not self.bday_str:
return
while True:
if self.match:
self.history.append(self.n_students)
#                 print(f"Match found. It took {self.n_students} students to get a match")
n_runs = [i for i in range(len(self.history))]
self.ax.scatter(n_runs, self.history)
# counts, bins = np.histogram(self.history)
# plt.stairs(counts, bins)
# self.ax_hist.hist(bins[:-1], bins, weights=counts)
self.ax_hist.clear()
sns.histplot(data=self.history, ax=self.ax_hist, bins=16)
# plt.show()
break
self.generate_bday()
self.n_students += 1
self.ax.set_title(f"Match found. It took {self.n_students} students.\nNumber of runs: {len(self.history)+1}")
# self.fig.canvas.draw()
# self.fig.canvas.flush_events()
big_classroom_sizes = [*range(1,1000, 5)]
small_classroom_sizes = [*range(1, 80)]
def plot_simulated_probs(sim_probs, class_size):
fig, ax = plt.subplots(1, 1, figsize=(10, 4))
#     ax.scatter(class_size, sim_probs)
sns.scatterplot(x=class_size, y=sim_probs, ax=ax, label="simulated probabilities")
ax.set_ylabel("Simulated Probability")
ax.set_xlabel("Classroom Size")
ax.set_title("Probability vs Number of Students")
ax.plot([0, max(class_size)], [0.5, 0.5], color='red', label="p = 0.5")
ax.grid(which = 'minor', color = '#EEEEEE', linewidth = 0.8)
ax.minorticks_on()
ax.legend()
plt.show()
class third_bday_problem:
def __init__(self) -> None:
fig, axes = plt.subplot_mosaic(
[["top row", "top row"], ["bottom left", "bottom right"]], figsize=(10, 8)
)
self.fig = fig
self.ax = axes["top row"]
self.count_ax = axes["bottom left"]
self.ax_hist = axes["bottom right"]
self.ax.spines["top"].set_color("none")
self.ax.spines["right"].set_color("none")
self.ax.spines["left"].set_color("none")
self.ax.get_yaxis().set_visible(False)
x = np.arange(365)
y = np.zeros((365,))
y[y == 0] = np.nan
y_match = np.zeros((365,))
y_match[y_match == 0] = np.nan
self.x = x
self.y = y
self.y_match = y_match
self.match = False
self.n_students = 0
self.dates = [
(date(2015, 1, 1) + timedelta(days=n)).strftime("%m-%d") for n in range(365)
]
self.month_names = [
"January",
"February",
"March",
"April",
"May",
"June",
"July",
"August",
"September",
"October",
"November",
"December",
]
self.history = []
self.match_index = None
self.match_str = None
self.cpoint = self.fig.canvas.mpl_connect("button_press_event", self.on_button_clicked)
# self.start_button = widgets.Button(description="Simulate!")
# display(self.start_button)
# self.start_button.on_click(self.on_button_clicked)
def generate_bday(self):
gen_bday = np.random.randint(0, 365)
if not np.isnan(self.y[gen_bday]):
self.match_index = gen_bday
self.match_str = self.dates[gen_bday]
self.y_match[gen_bday] = 1
self.match = True
self.y[gen_bday] = 0.5
def on_button_clicked(self, event):
if event.inaxes in [self.ax]:
self.new_run()
self.add_students()
def add_students(self):
while True:
if self.match:
self.history.append(self.n_students)
n_runs = [i for i in range(len(self.history))]
self.count_ax.scatter(n_runs, self.history)
self.count_ax.set_ylabel("# of students")
self.count_ax.set_xlabel("# of simulations")
month_str = self.month_names[int(self.match_str.split("-")[0]) - 1]
day_value = self.match_str.split("-")[1]
self.ax.set_title(
f"Match found for {month_str} {day_value}\nIt took {self.n_students} students to get a match"
)
self.ax_hist.clear()
sns.histplot(data=self.history, ax=self.ax_hist, bins="auto")
break
self.generate_bday()
self.n_students += 1
self.ax.set_title(f"Number of students: {self.n_students}")
self.fig.canvas.draw()
self.fig.canvas.flush_events()
if not np.isnan(self.y_match).all():
markerline, stemlines, baseline = self.ax.stem(
self.x, self.y_match, markerfmt="*"
)
plt.setp(markerline, color="green")
plt.setp(stemlines, "color", plt.getp(markerline, "color"))
plt.setp(stemlines, "linestyle", "dotted")
self.ax.stem(self.x, self.y, markerfmt="o")
def new_run(self):
y = np.zeros((365,))
y[y == 0] = np.nan
y_match = np.zeros((365,))
y_match[y_match == 0] = np.nan
self.y_match = y_match
self.y = y
self.n_students = 0
self.match = False
self.ax.clear()
import numpy as np
from datetime import timedelta, date
import matplotlib.pyplot as plt
import seaborn as sns
import ipywidgets as widgets
from ipywidgets import interact_manual
class your_bday:
def __init__(self) -> None:
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 4))
self.fig = fig
self.ax = ax1
self.ax_hist = ax2
self.dates = [
(date(2015, 1, 1) + timedelta(days=n)).strftime("%m-%d") for n in range(365)
]
self.match = False
self.bday_str = None
self.bday_index = None
self.n_students = 0
self.history = []
self.bday_picker = widgets.DatePicker(description="Pick your bday", disabled=False, style={'description_width': 'initial'})
self.start_button = widgets.Button(description="Simulate!")
display(self.bday_picker)
display(self.start_button)
self.start_button.on_click(self.on_button_clicked)
def on_button_clicked(self, b):
self.match = False
self.n_students = 0
self.get_bday()
self.add_students()
def get_bday(self):
try:
self.bday_str = self.bday_picker.value.strftime("%m-%d")
except AttributeError:
self.ax.set_title(f"Input a valid date and try again!")
return
self.bday_index = self.dates.index(self.bday_str)
def generate_bday(self):
# gen_bdays = np.random.randint(0, 365, (n_people))
gen_bday = np.random.randint(0, 365)
# if not np.isnan(self.y[gen_bday]):
if gen_bday == self.bday_index:
self.match = True
def add_students(self):
if not self.bday_str:
return
while True:
if self.match:
self.history.append(self.n_students)
#                 print(f"Match found. It took {self.n_students} students to get a match")
n_runs = [i for i in range(len(self.history))]
self.ax.scatter(n_runs, self.history)
# counts, bins = np.histogram(self.history)
# plt.stairs(counts, bins)
# self.ax_hist.hist(bins[:-1], bins, weights=counts)
self.ax_hist.clear()
sns.histplot(data=self.history, ax=self.ax_hist, bins=16)
# plt.show()
break
self.generate_bday()
self.n_students += 1
self.ax.set_title(f"Match found. It took {self.n_students} students.\nNumber of runs: {len(self.history)+1}")
# self.fig.canvas.draw()
# self.fig.canvas.flush_events()
big_classroom_sizes = [*range(1,1000, 5)]
small_classroom_sizes = [*range(1, 80)]
def plot_simulated_probs(sim_probs, class_size):
fig, ax = plt.subplots(1, 1, figsize=(10, 4))
#     ax.scatter(class_size, sim_probs)
sns.scatterplot(x=class_size, y=sim_probs, ax=ax, label="simulated probabilities")
ax.set_ylabel("Simulated Probability")
ax.set_xlabel("Classroom Size")
ax.set_title("Probability vs Number of Students")
ax.plot([0, max(class_size)], [0.5, 0.5], color='red', label="p = 0.5")
ax.grid(which = 'minor', color = '#EEEEEE', linewidth = 0.8)
ax.minorticks_on()
ax.legend()
plt.show()
class third_bday_problem:
def __init__(self) -> None:
fig, axes = plt.subplot_mosaic(
[["top row", "top row"], ["bottom left", "bottom right"]], figsize=(10, 8)
)
self.fig = fig
self.ax = axes["top row"]
self.count_ax = axes["bottom left"]
self.ax_hist = axes["bottom right"]
self.ax.spines["top"].set_color("none")
self.ax.spines["right"].set_color("none")
self.ax.spines["left"].set_color("none")
self.ax.get_yaxis().set_visible(False)
x = np.arange(365)
y = np.zeros((365,))
y[y == 0] = np.nan
y_match = np.zeros((365,))
y_match[y_match == 0] = np.nan
self.x = x
self.y = y
self.y_match = y_match
self.match = False
self.n_students = 0
self.dates = [
(date(2015, 1, 1) + timedelta(days=n)).strftime("%m-%d") for n in range(365)
]
self.month_names = [
"January",
"February",
"March",
"April",
"May",
"June",
"July",
"August",
"September",
"October",
"November",
"December",
]
self.history = []
self.match_index = None
self.match_str = None
self.cpoint = self.fig.canvas.mpl_connect("button_press_event", self.on_button_clicked)
# self.start_button = widgets.Button(description="Simulate!")
# display(self.start_button)
# self.start_button.on_click(self.on_button_clicked)
def generate_bday(self):
gen_bday = np.random.randint(0, 365)
if not np.isnan(self.y[gen_bday]):
self.match_index = gen_bday
self.match_str = self.dates[gen_bday]
self.y_match[gen_bday] = 1
self.match = True
self.y[gen_bday] = 0.5
def on_button_clicked(self, event):
if event.inaxes in [self.ax]:
self.new_run()
self.add_students()
def add_students(self):
while True:
if self.match:
self.history.append(self.n_students)
n_runs = [i for i in range(len(self.history))]
self.count_ax.scatter(n_runs, self.history)
self.count_ax.set_ylabel("# of students")
self.count_ax.set_xlabel("# of simulations")
month_str = self.month_names[int(self.match_str.split("-")[0]) - 1]
day_value = self.match_str.split("-")[1]
self.ax.set_title(
f"Match found for {month_str} {day_value}\nIt took {self.n_students} students to get a match"
)
self.ax_hist.clear()
sns.histplot(data=self.history, ax=self.ax_hist, bins="auto")
break
self.generate_bday()
self.n_students += 1
self.ax.set_title(f"Number of students: {self.n_students}")
self.fig.canvas.draw()
self.fig.canvas.flush_events()
if not np.isnan(self.y_match).all():
markerline, stemlines, baseline = self.ax.stem(
self.x, self.y_match, markerfmt="*"
)
plt.setp(markerline, color="green")
plt.setp(stemlines, "color", plt.getp(markerline, "color"))
plt.setp(stemlines, "linestyle", "dotted")
self.ax.stem(self.x, self.y, markerfmt="o")
def new_run(self):
y = np.zeros((365,))
y[y == 0] = np.nan
y_match = np.zeros((365,))
y_match[y_match == 0] = np.nan
self.y_match = y_match
self.y = y
self.n_students = 0
self.match = False
self.ax.clear()
game = utils.your_bday()
import numpy as np
import matplotlib.pyplot as plt
import utils
game = utils.your_bday()
game = utils.your_bday()
game = utils.your_bday()
game = utils.your_bday()
import numpy as np
import matplotlib.pyplot as plt
import utils
%matplotlib widget
reticulate::repl_python()
import numpy as np
import matplotlib.pyplot as plt
import utils
game = utils.your_bday()
game = utils.your_bday()
import numpy as np
import matplotlib.pyplot as plt
import utils as utils
game = utils.your_bday()
import utils
utils
reticulate::repl_python()
import numpy as np
import matplotlib.pyplot as plt
import utils as utils
game = utils.your_bday()
import numpy as np
import matplotlib.pyplot as plt
import utils as utils
%matplotlib widget
reticulate::repl_python()
game = utils.your_bday()
reticulate::repl_python()
import pandas as pd
import seaborn as sns
quit
setwd("C:/Users/welli/OneDrive/portifolio-dados.github.io/projetos-Python/dados")
library(readr)
world_happiness <- read_csv("world_happiness.csv")
View(world_happiness)
reticulate::repl_python()
df = pd.read_csv(..projetos-Python/dados/world-happiness.csv)
df = pd.read_csv('..projetos-Python/dados/world-happiness.csv')
df = pd.read_csv('../dados/world-happiness.csv')
df = pd.read_csv('../dados/world_happiness.csv')
View(df)
df = pd.read_csv('../dados/world_happiness.csv')
df.head()
# Visualizando as últimas linhas do DataFrame
df.tail()
df.info()
df.index
df.columns
df.describe()
df.columns = df.columns.str.replace(' ', '_')
df.columns
# Removendo os espaços dos nomes das colunas
df.columns = df.columns.str.replace(' ', '_')
# Colocando os nomes das colunas em minúsculo
df.columns = df.columns.str.lower()
# Visualizando os nomes das colunas do DataFrame
df.columns
df.dtypes
df['country']
df.country
x = df.life_ladder
# Selecionando a coluna life_ladder
x = df.life_ladder
print(x)
x = df['life_ladder']
x
print(x)
# Selecionando as linhas de 1 a 5
x = df[1:5]
print(x)
# Selecionando as linhas de 1 a 5 e as colunas life_ladder e gdp_per_capita
x = df.loc[1:5, ['life_ladder', 'gdp_per_capita']]
print(x)
# Selecionando as linhas de 1 a 5 e as colunas life_ladder e gdp_per_capita
x = df[1:5, ['life_ladder', 'gdp_per_capita']]
print(x)
# Selecionando as linhas onde o valor da coluna year é igual a 2018
x = df[df.year == 2018]
print(x)
x = df[df.life_ladder > 5]
x
new_df = df[df["year"] == 2022]
new_df = new_df.reset_index(drop=True)
new_df
df.describe()
df.isnull().sum()
df.pllt()
df.plolt()
df.plot()
df.plot(kind='scatter', x='log_gdp_per_capita', y='life_ladder')
cmap = {
'Brazil': 'Green',
'Slovenia': 'Orange',
'India': 'purple'
}
df.plot(
kind='scatter',
x='log_gdp_per_capita',
y='life_ladder',
c=[cmap.get(c, 'yellow') for c in df.country_name], # Set the colors
s=2 # Set the size of the points
)
df.hist("life_ladder")
sns.pairplot(df)
sns.scatterplot(data=df, x='log_gdp_per_capita', y='life_ladder')
df['nova_coluna'] = df['log_gdp_per_capita'] + df['life_ladder']
df['this_column_makes_no_sense'] = df["year"] + df["life_ladder"]
df["net_affect_difference"] = df["positive_affect"] - df["negative_affect"]
df.head()
# carregar os dados
if(!require(haven)){install.packages("haven")};library(haven)
# manipulação e visualização dos dados
if(!require(tidyverse)){install.packages("tidyverse")}; library(tidyverse)
if(!require(skimr)){install.packages("skimr")};library(skimr)
# implementar o plano amostral
if(!require(srvyr)){install.packages("srvyr")};library(srvyr)
# carregar os dados
if(!require(haven)){install.packages("haven")};library(haven)
# manipulação e visualização dos dados
if(!require(tidyverse)){install.packages("tidyverse")}; library(tidyverse)
if(!require(skimr)){install.packages("skimr")};library(skimr)
# implementar o plano amostral
if(!require(srvyr)){install.packages("srvyr")};library(srvyr)
BD_Covitel <- read_dta("Dados_Covitel_2023/BD_Covitel_2023imputed_com_peso.dta")
BD_Covitel
BD_Covitel <- BD_Covitel %>%
filter(!d05 %in% c(777, 888)) %>%
filter(!d06 %in% c(777,888)) %>%
mutate(imc = (d05/((d06/100)^2)))
skim_without_charts(BD_Covitel)
reticulate::repl_python()
from google.cloud import bigquery
from google.cloud import bigquery
from google.cloud import bigquery
from google.cloud import bigquery
from google.cloud import bigquery
from google.cloud import bigquery
conda activate base
pip install google.cloud
from google.cloud import bigquery
reticulate::repl_python()
reticulate::repl_python()
install.packages("reticulate")
library(reticulate)
use_python("C:/Users/welli/anaconda3/python.exe", required = TRUE)
reticulate::repl_python()
from google.cloud import bigquery
<python_path> -m pip install google.cloud
from google.cloud import bigquery
C:/Users/welli/anaconda3/python.exe -m pip install google.cloud
library(reticulate)
repl_python()
from google.cloud import bigquery
# Importando a biblioteca
from google.cloud import bigquery
use_python("C:/Users/welli/anaconda3/envs/seu_ambiente/python.exe", required = TRUE)
# Importando a biblioteca
from google.cloud import bigquery
# Instale o pacote, caso ainda não esteja instalado
if (!require("writexl")) install.packages("writexl")
# Carregue o pacote
library(writexl)
# Gerar dados fictícios para 1000 linhas
set.seed(123) # Para reprodutibilidade
n <- 1000
dados_negocios <- data.frame(
Mes = sample(c("Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho",
"Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"),
n, replace = TRUE),
Produto = sample(c("Produto A", "Produto B", "Produto C", "Produto D"), n, replace = TRUE),
Categoria = sample(c("Eletrônicos", "Vestuário", "Cosméticos", "Alimentos"), n, replace = TRUE),
Região = sample(c("Norte", "Sul", "Sudeste", "Centro-Oeste", "Nordeste"), n, replace = TRUE),
Vendas = round(runif(n, min = 5000, max = 100000), 2), # Valores entre 5.000 e 100.000
Custo = round(runif(n, min = 3000, max = 80000), 2),  # Valores entre 3.000 e 80.000
Lucro_Porcento = round(runif(n, min = 5, max = 50), 1),  # Percentual de lucro entre 5% e 50%
Clientes_Atendidos = sample(50:500, n, replace = TRUE)   # Número de clientes entre 50 e 500
)
# Exportar para Excel
write_xlsx(dados_negocios, "dados_negocios_1000_linhas.xlsx")
# Mensagem de sucesso
cat("Planilha 'dados_negocios_1000_linhas.xlsx' gerada com sucesso na pasta de trabalho!")
reticulate::repl_python()
reticulate::repl_python()
